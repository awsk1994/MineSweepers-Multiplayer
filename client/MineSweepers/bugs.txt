To Improve (high):
  - socket: keep alive?
  - keep track of user connect/disconnect on server.. is it doing it correctly?
  - if player is in a room, and then server restarts, the player is stuck in the room because it is now a new socket connection. Server should be able to fix this.
  

To Improve (mid):
- join room not done yet.
   - general:
     - alot of the socket message should be a HTTP request

   - highscore:
     - filter by name
     - should fetch top 10, and then click to load more.
     - UI enhancement:
       - create filter by username.. and add search icon
   - room:
     - create room should be using form.
  - room, rooms, request name....
     - should perhaps make this a route? (eg. /mutliplayer/:difficulty, :roomId)
  - soloCompoennt's display room, rooms.etc.
     - should perhaps make it a number 0,1,2, each representing the different room, rooms.etc.
  - header
     - UI: displaying username.
  - chat:
     - should add how many unack chat messages badge next to "global chat and room chat button"...
    - room chat works... but should the joinroom be called in constructor or onInit of SoloComponent? Better if onInit.
    - switchMap :: look into it. Should we use it
    - understand observables.
     - (todo later) layover for adding username and server not found
 - requestName:
      - (LATER) Entering nickname should save it in localstorage (can set expire day?)
     - (LATER) need to store chat record in db. When refresh, should fetch last n chat record. Normally, just keep socket open and append to list. If possible, better to refresh with db every n minutes.

 - room:
     - room name should be unique.
     - increase/decrease occupancy based on room.players.length

Bugs:
 - when localStorage's nickname is removed, the requestname will pop up and block the game. Should pause the game and continue game after submitted nickname.
 - all the error message from server are not returning and being displayed correctly.
 - all the error message in socket should get sent to the client-side too.
 - When you use incognito (without previously using it) mode to directly access a room via URL, then the nickname becomes Unknown in the player list... probably nickname is not sent to server when doing this.
 - when you change the nickname, it should update room's player's name of changed nickname, as well in the chat.
 - when server is down, and back up, somethign always happen.
 
Todo:

 - MULTIPLAYER GAMEFLOW:
    Client:
    game.service.ts:GameOver(status):
      - if multiplayer game, then send information to server via socket.
      - then, socket will emit message to the room that a player is done -> modify room’s state to ‘multiplayerGameOverForOne’ -> this player should then have a wait screen.
      - when both players are done -> send to server -> room state change to multiplayerGameOverForAll -> display modal with two buttons: ‘restart game’, ‘back to waiting room’.

    game.service.ts:HandleClick(..)
      - in if(this.state == Gamestate.GAMEOVER), add condition in it NOT to restart if multiplayer mode.
      - later on… it should send information back to server via sockets to prepare gameBoard and send it to the room.

    Server:
    ! - socket message to UI about the prepared game board should include difficulty (0, 1 or 2) -> then remove hardcoded difficulty in solo.component: ngOnInit();

    todo:
    - room should get update of each player’s click status.


    Other issues:
    when the game starts, guest is considered leaving the room (because url changed) and thus, the room is deleted whenever a multiplayer game starts.
    Need to fix this...


- countdowntoStartGame.

- unit/e2e testing.
- upgrade to Angular 4

- Room:
   - create room should be a modal.

- chat UI
  - hover over the header to see list of users
  - date listing for the chat
  - hit enter to submit... 
  I prefer (keydown.enter)="mySubmit()" because there won't be added a line break if the cursor was somewhere within a <textarea> but not at its end.

  - Use jQuery to detect changes in things.
     - footer should be semi-transparent when screen doesn't fit everything. When screen fits all, then should expanded footer (with About Me and Contact)
  - type up how to play (w/ screenshot)

- nickname:
   - add some id to guest. eg. first guest is guest_1, second is guest_2.etc

 - concerns:
   - if you look at console on the browser, you will see that console.log placed in playersUpdate and roomsUpdate are printed many many times... make sure this is normal for streams... maybe it's updating more than it needs?


Todo (future):
1. turn to phone app
2. make website okay when browser size shrink
3. Local storage save username so don't need to ask username again between Solo and multiplayer and chat ask name.
4. rename all username to nickname or something that's consistent.
5. Make it a bundle of multiplayer games (eg. tanks, hangman, pong)

Next Project?:
1. Google+, Facebook.etc login
2. Pass tokens... so can remember 

Considerations:
 - have different size tiles depending on difficulty (board size).
 - maybe make the website just whole page and then scale everything based on view height and width... no scroll...
 - changing DB? mongodb is not a relational database...! mySQL or presGre? or firebase? Only store chat with mongodb?
- room list lists all the rooms regardless of difficulty, and then you can filter it if you want? or maybe display all with subheading?

UI enhancement:
2. Color consistency. Choose 4-5 colors, and apply them consistently. Now, there are like white and green-ish white.etc...
3. Think about the bomb color, and the flagBomb progress bar... if it makes sense.
4. Might want to consider changing the color scheme? Black-orange looks like pornhub.
5. Make responsive; especially the tiles.
6. Minesweeper title can be made better.
7. title (in google chrome tab) and icon are not set.
8. animations


Notes on Socket (2017/07/04):
1. Go to server folder, and run npm start
2. Go to client and npm start
3. Go to localhost:4200 (for client)
4. go to localhost:3000 (for client as well... but we'll act as a mock client chat)

Socket Link:
http://www.syntaxsuccess.com/viewarticle/socket.io-with-rxjs-in-angular-2.0


3rd party libraries:
 - https://mattlewis92.github.io/angular-gauge/#
 - https://compodoc.github.io/website/


